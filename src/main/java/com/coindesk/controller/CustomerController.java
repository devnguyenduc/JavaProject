package com.coindesk.controller;

import com.coindesk.model.Customer;
import com.coindesk.services.impl.CustomerService;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

@RestController // This means that this class is a Controller
@RequestMapping(path="/customer") // This means URL's start with /customer (after Application path)
public class CustomerController {
    //@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerService customerService;
    public CustomerController(CustomerService _service){
        customerService = _service;
    }

    @GetMapping(path="/")
    public @ResponseBody Iterable<Customer> getAllUsers() {
        // This returns a JSON or XML with the users
        return customerService.search();
    }

    @PostMapping(path="/") // Map ONLY POST Requests
    public @ResponseBody
    Customer addNewUser (@RequestBody Customer newCustomer,
                                         UriComponentsBuilder builder) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        customerService.insert(newCustomer);

        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(builder.path("/{id}")
                .buildAndExpand(newCustomer.getId()).toUri());
        return newCustomer;
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Customer findUser(@PathVariable("id") long id){
        return (Customer) customerService.searchID(id);
    }

    @PutMapping(path="/{id}")
    public @ResponseBody ResponseEntity<String> updateUser(@PathVariable long id,
                                                           @RequestBody Customer updateCustomer){
        String value = customerService.change(id, updateCustomer);
        return new ResponseEntity<String>(value, HttpStatus.MULTI_STATUS);
    }

    /*
    *
    * @GetMapping("/valid-name/{name}")
        public void createUsername(@PathVariable("name") @NotBlank @Size(max = 10) String username) {
            // ...
        }
    *  */

    @DeleteMapping(path = "/{id}")
    public @ResponseBody ResponseEntity<String> deleteCustomer(@PathVariable long id,
                                                               @RequestBody Customer deleteCustomer){
        String value = customerService.delete(id, deleteCustomer);
        return new ResponseEntity<String>(value, HttpStatus.MULTI_STATUS);
    }
}