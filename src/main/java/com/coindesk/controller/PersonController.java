package com.coindesk.controller;

import com.coindesk.model.Person;
import com.coindesk.services.impl.PersonService;

import io.swagger.annotations.*;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@RestController // This means that this class is a Controller
@RequestMapping(path="/people") // This means URL's start with /customer (after Application path)
@Api(value = "Home Controller", description = "Operations pertaining to Customers.")
public class PersonController {
    //@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PersonService personService;
    public PersonController(PersonService _service){
        personService = _service;
    }

    @ApiOperation(value = "Returns all list of users.", response = List.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved list"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    @GetMapping(path="/")
    public @ResponseBody Iterable<Person> getAllUsers() {
        // This returns a JSON or XML with the users
        return personService.search();
    }

    @ApiOperation(value = "Stores the user.", response = Person.class)
    @PostMapping(path="/") // Map ONLY POST Requests
    public @ResponseBody
    ResponseEntity<Person> addNewUser (@ApiParam(value = "User details", required = true) @RequestBody Person newCustomer,
                                         UriComponentsBuilder builder) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        personService.insert(newCustomer);

        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(builder.path("/{id}")
                .buildAndExpand(newCustomer.getId()).toUri());
        return new ResponseEntity<Person>(HttpStatus.CREATED);
    }

    @ApiOperation(value = "Returns User if ID is found.", response = Person.class)
    @GetMapping(path="/{id}")
    public @ResponseBody Person findPerson(@PathVariable("id") long id){
        return (Person) personService.searchID(id);
    }

    @ApiOperation(value = "Updates the user based Id.")
    @PutMapping(path="/{id}")
    public @ResponseBody ResponseEntity<String> updatePerson(@PathVariable long id,
                                                           @RequestBody Person updatePerson){
        String value = personService.change(id, updatePerson);
        return new ResponseEntity<String>(value, HttpStatus.MULTI_STATUS);
    }

    /*
    *
    * @GetMapping("/valid-name/{name}")
        public void createUsername(@PathVariable("name") @NotBlank @Size(max = 10) String username) {
            // ...
        }
    *  */

    @ApiOperation(value = "Deletes the user based on given Id.")
    @DeleteMapping(path = "/{id}")
    public @ResponseBody ResponseEntity<String> deletePerson(@PathVariable long id,
                                                               @RequestBody Person deletePerson){
        String value = personService.delete(id, deletePerson);
        return new ResponseEntity<String>(value, HttpStatus.MULTI_STATUS);
    }

}